// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/critical_section.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Protocol buffer representing a CriticalSection.
type CriticalSectionDef struct {
	// Name of the critical section handle.
	CriticalSectionName string `protobuf:"bytes,1,opt,name=critical_section_name,json=criticalSectionName,proto3" json:"critical_section_name,omitempty"`
}

func (m *CriticalSectionDef) Reset()         { *m = CriticalSectionDef{} }
func (m *CriticalSectionDef) String() string { return proto.CompactTextString(m) }
func (*CriticalSectionDef) ProtoMessage()    {}
func (*CriticalSectionDef) Descriptor() ([]byte, []int) {
	return fileDescriptorCriticalSection, []int{0}
}

func (m *CriticalSectionDef) GetCriticalSectionName() string {
	if m != nil {
		return m.CriticalSectionName
	}
	return ""
}

// Protocol buffer representing a CriticalSection execution.
type CriticalSectionExecutionDef struct {
	// Name of the critical section handle.
	ExecuteInCriticalSectionName string `protobuf:"bytes,1,opt,name=execute_in_critical_section_name,json=executeInCriticalSectionName,proto3" json:"execute_in_critical_section_name,omitempty"`
	// Whether this operation requires exclusive access to its resources,
	// (i.e., no other CriticalSections may request the same resources).
	ExclusiveResourceAccess bool `protobuf:"varint,2,opt,name=exclusive_resource_access,json=exclusiveResourceAccess,proto3" json:"exclusive_resource_access,omitempty"`
}

func (m *CriticalSectionExecutionDef) Reset()         { *m = CriticalSectionExecutionDef{} }
func (m *CriticalSectionExecutionDef) String() string { return proto.CompactTextString(m) }
func (*CriticalSectionExecutionDef) ProtoMessage()    {}
func (*CriticalSectionExecutionDef) Descriptor() ([]byte, []int) {
	return fileDescriptorCriticalSection, []int{1}
}

func (m *CriticalSectionExecutionDef) GetExecuteInCriticalSectionName() string {
	if m != nil {
		return m.ExecuteInCriticalSectionName
	}
	return ""
}

func (m *CriticalSectionExecutionDef) GetExclusiveResourceAccess() bool {
	if m != nil {
		return m.ExclusiveResourceAccess
	}
	return false
}

func init() {
	proto.RegisterType((*CriticalSectionDef)(nil), "tensorflow.CriticalSectionDef")
	proto.RegisterType((*CriticalSectionExecutionDef)(nil), "tensorflow.CriticalSectionExecutionDef")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/critical_section.proto", fileDescriptorCriticalSection)
}

var fileDescriptorCriticalSection = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x65, 0x06, 0x04, 0x1e, 0x83, 0x2a, 0x82, 0x60, 0x88, 0x3a, 0x75, 0x4a, 0x24, 0xd8,
	0x10, 0x0b, 0x2d, 0x20, 0x58, 0x50, 0x15, 0x36, 0x16, 0xcb, 0x39, 0x5d, 0x82, 0x45, 0xe2, 0x43,
	0x67, 0x9b, 0xf6, 0xef, 0xf0, 0x2f, 0x19, 0x11, 0x26, 0x50, 0x12, 0x50, 0x37, 0x9f, 0xde, 0xf7,
	0xde, 0xc9, 0xef, 0x64, 0xe1, 0xd1, 0x3a, 0xe2, 0xba, 0xa5, 0x55, 0x01, 0xc4, 0x58, 0xbc, 0x30,
	0x79, 0xaa, 0x42, 0x5d, 0x00, 0x1b, 0x6f, 0x40, 0xb7, 0xca, 0x21, 0x78, 0x43, 0x36, 0x8f, 0x4a,
	0x22, 0x37, 0x86, 0xe9, 0xad, 0x4c, 0x16, 0x3d, 0xf5, 0xf0, 0x05, 0x5d, 0x61, 0x9d, 0x9c, 0xca,
	0xc9, 0xd8, 0xab, 0xac, 0xee, 0x30, 0x15, 0x99, 0x98, 0xed, 0x97, 0x07, 0x30, 0xb4, 0xdc, 0xeb,
	0x0e, 0xa7, 0x6f, 0x42, 0x1e, 0x8f, 0xa2, 0xae, 0xd7, 0x08, 0xe1, 0x3b, 0xf3, 0x46, 0x66, 0x18,
	0x67, 0x54, 0xc6, 0xaa, 0x6d, 0xf1, 0x27, 0x3d, 0x77, 0x67, 0x17, 0x7f, 0xf7, 0x24, 0xe7, 0xf2,
	0x08, 0xd7, 0xd0, 0x06, 0x67, 0x5e, 0x51, 0x31, 0x3a, 0x0a, 0x0c, 0xa8, 0x34, 0x00, 0x3a, 0x97,
	0xee, 0x64, 0x62, 0xb6, 0x57, 0x1e, 0xfe, 0x00, 0x65, 0xaf, 0x5f, 0x46, 0x79, 0xee, 0x65, 0x4a,
	0xdc, 0xe4, 0x9b, 0xff, 0xe7, 0x35, 0xeb, 0x0e, 0x57, 0xc4, 0xcf, 0xf3, 0xc9, 0x68, 0xd9, 0xf2,
	0xb3, 0x2b, 0xb7, 0x14, 0x8f, 0x17, 0x8d, 0xf1, 0x4f, 0xa1, 0xca, 0x81, 0xba, 0xdf, 0x55, 0xff,
	0xff, 0x6c, 0x68, 0x78, 0x83, 0x77, 0x21, 0xaa, 0xdd, 0x38, 0x9c, 0x7d, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xf4, 0xdd, 0x9c, 0x03, 0xa9, 0x01, 0x00, 0x00,
}
