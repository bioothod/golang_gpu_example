// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/config.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow2 "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
import tensorflow10 "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
import tensorflow13 "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Optimization level
type OptimizerOptions_Level int32

const (
	// L1 is the default level.
	// Optimization performed at L1 :
	// 1. Common subexpression elimination
	// 2. Constant folding
	OptimizerOptions_L1 OptimizerOptions_Level = 0
	// No optimizations
	OptimizerOptions_L0 OptimizerOptions_Level = -1
)

var OptimizerOptions_Level_name = map[int32]string{
	0:  "L1",
	-1: "L0",
}
var OptimizerOptions_Level_value = map[string]int32{
	"L1": 0,
	"L0": -1,
}

func (x OptimizerOptions_Level) String() string {
	return proto.EnumName(OptimizerOptions_Level_name, int32(x))
}
func (OptimizerOptions_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConfig, []int{1, 0}
}

// Control the use of the compiler/jit.  Experimental.
type OptimizerOptions_GlobalJitLevel int32

const (
	OptimizerOptions_DEFAULT OptimizerOptions_GlobalJitLevel = 0
	OptimizerOptions_OFF     OptimizerOptions_GlobalJitLevel = -1
	// The following settings turn on compilation, with higher values being
	// more aggressive.  Higher values may reduce opportunities for parallelism
	// and may use more memory.  (At present, there is no distinction, but this
	// is expected to change.)
	OptimizerOptions_ON_1 OptimizerOptions_GlobalJitLevel = 1
	OptimizerOptions_ON_2 OptimizerOptions_GlobalJitLevel = 2
)

var OptimizerOptions_GlobalJitLevel_name = map[int32]string{
	0:  "DEFAULT",
	-1: "OFF",
	1:  "ON_1",
	2:  "ON_2",
}
var OptimizerOptions_GlobalJitLevel_value = map[string]int32{
	"DEFAULT": 0,
	"OFF":     -1,
	"ON_1":    1,
	"ON_2":    2,
}

func (x OptimizerOptions_GlobalJitLevel) String() string {
	return proto.EnumName(OptimizerOptions_GlobalJitLevel_name, int32(x))
}
func (OptimizerOptions_GlobalJitLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConfig, []int{1, 1}
}

// TODO(pbar) Turn this into a TraceOptions proto which allows
// tracing to be controlled in a more orthogonal manner?
type RunOptions_TraceLevel int32

const (
	RunOptions_NO_TRACE       RunOptions_TraceLevel = 0
	RunOptions_SOFTWARE_TRACE RunOptions_TraceLevel = 1
	RunOptions_HARDWARE_TRACE RunOptions_TraceLevel = 2
	RunOptions_FULL_TRACE     RunOptions_TraceLevel = 3
)

var RunOptions_TraceLevel_name = map[int32]string{
	0: "NO_TRACE",
	1: "SOFTWARE_TRACE",
	2: "HARDWARE_TRACE",
	3: "FULL_TRACE",
}
var RunOptions_TraceLevel_value = map[string]int32{
	"NO_TRACE":       0,
	"SOFTWARE_TRACE": 1,
	"HARDWARE_TRACE": 2,
	"FULL_TRACE":     3,
}

func (x RunOptions_TraceLevel) String() string {
	return proto.EnumName(RunOptions_TraceLevel_name, int32(x))
}
func (RunOptions_TraceLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConfig, []int{6, 0}
}

type GPUOptions struct {
	// A value between 0 and 1 that indicates what fraction of the
	// available GPU memory to pre-allocate for each process.  1 means
	// to pre-allocate all of the GPU memory, 0.5 means the process
	// allocates ~50% of the available GPU memory.
	PerProcessGpuMemoryFraction float64 `protobuf:"fixed64,1,opt,name=per_process_gpu_memory_fraction,json=perProcessGpuMemoryFraction,proto3" json:"per_process_gpu_memory_fraction,omitempty"`
	// The type of GPU allocation strategy to use.
	//
	// Allowed values:
	// "": The empty string (default) uses a system-chosen default
	//     which may change over time.
	//
	// "BFC": A "Best-fit with coalescing" algorithm, simplified from a
	//        version of dlmalloc.
	AllocatorType string `protobuf:"bytes,2,opt,name=allocator_type,json=allocatorType,proto3" json:"allocator_type,omitempty"`
	// Delay deletion of up to this many bytes to reduce the number of
	// interactions with gpu driver code.  If 0, the system chooses
	// a reasonable default (several MBs).
	DeferredDeletionBytes int64 `protobuf:"varint,3,opt,name=deferred_deletion_bytes,json=deferredDeletionBytes,proto3" json:"deferred_deletion_bytes,omitempty"`
	// If true, the allocator does not pre-allocate the entire specified
	// GPU memory region, instead starting small and growing as needed.
	AllowGrowth bool `protobuf:"varint,4,opt,name=allow_growth,json=allowGrowth,proto3" json:"allow_growth,omitempty"`
	// A comma-separated list of GPU ids that determines the 'visible'
	// to 'virtual' mapping of GPU devices.  For example, if TensorFlow
	// can see 8 GPU devices in the process, and one wanted to map
	// visible GPU devices 5 and 3 as "/device:GPU:0", and "/device:GPU:1",
	// then one would specify this field as "5,3".  This field is similar in
	// spirit to the CUDA_VISIBLE_DEVICES environment variable, except
	// it applies to the visible GPU devices in the process.
	//
	// NOTE:
	// 1. The GPU driver provides the process with the visible GPUs
	//    in an order which is not guaranteed to have any correlation to
	//    the *physical* GPU id in the machine.  This field is used for
	//    remapping "visible" to "virtual", which means this operates only
	//    after the process starts.  Users are required to use vendor
	//    specific mechanisms (e.g., CUDA_VISIBLE_DEVICES) to control the
	//    physical to visible device mapping prior to invoking TensorFlow.
	// 2. In the code, the ids in this list are also called "CUDA GPU id"s,
	//    and the 'virtual' ids of GPU devices (i.e. the ids in the device
	//    name "/device:GPU:<id>") are also called "TF GPU id"s. Please
	//    refer to third_party/tensorflow/core/common_runtime/gpu/gpu_id.h
	//    for more information.
	VisibleDeviceList string `protobuf:"bytes,5,opt,name=visible_device_list,json=visibleDeviceList,proto3" json:"visible_device_list,omitempty"`
	// In the event polling loop sleep this many microseconds between
	// PollEvents calls, when the queue is not empty.  If value is not
	// set or set to 0, gets set to a non-zero default.
	PollingActiveDelayUsecs int32 `protobuf:"varint,6,opt,name=polling_active_delay_usecs,json=pollingActiveDelayUsecs,proto3" json:"polling_active_delay_usecs,omitempty"`
	// In the event polling loop sleep this many millisconds between
	// PollEvents calls, when the queue is empty.  If value is not
	// set or set to 0, gets set to a non-zero default.
	PollingInactiveDelayMsecs int32 `protobuf:"varint,7,opt,name=polling_inactive_delay_msecs,json=pollingInactiveDelayMsecs,proto3" json:"polling_inactive_delay_msecs,omitempty"`
	// Force all tensors to be gpu_compatible. On a GPU-enabled TensorFlow,
	// enabling this option forces all CPU tensors to be allocated with Cuda
	// pinned memory. Normally, TensorFlow will infer which tensors should be
	// allocated as the pinned memory. But in case where the inference is
	// incomplete, this option can significantly speed up the cross-device memory
	// copy performance as long as it fits the memory.
	// Note that this option is not something that should be
	// enabled by default for unknown or very large models, since all Cuda pinned
	// memory is unpageable, having too much pinned memory might negatively impact
	// the overall host system performance.
	ForceGpuCompatible bool                     `protobuf:"varint,8,opt,name=force_gpu_compatible,json=forceGpuCompatible,proto3" json:"force_gpu_compatible,omitempty"`
	Experimental       *GPUOptions_Experimental `protobuf:"bytes,9,opt,name=experimental" json:"experimental,omitempty"`
}

func (m *GPUOptions) Reset()                    { *m = GPUOptions{} }
func (m *GPUOptions) String() string            { return proto.CompactTextString(m) }
func (*GPUOptions) ProtoMessage()               {}
func (*GPUOptions) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *GPUOptions) GetPerProcessGpuMemoryFraction() float64 {
	if m != nil {
		return m.PerProcessGpuMemoryFraction
	}
	return 0
}

func (m *GPUOptions) GetAllocatorType() string {
	if m != nil {
		return m.AllocatorType
	}
	return ""
}

func (m *GPUOptions) GetDeferredDeletionBytes() int64 {
	if m != nil {
		return m.DeferredDeletionBytes
	}
	return 0
}

func (m *GPUOptions) GetAllowGrowth() bool {
	if m != nil {
		return m.AllowGrowth
	}
	return false
}

func (m *GPUOptions) GetVisibleDeviceList() string {
	if m != nil {
		return m.VisibleDeviceList
	}
	return ""
}

func (m *GPUOptions) GetPollingActiveDelayUsecs() int32 {
	if m != nil {
		return m.PollingActiveDelayUsecs
	}
	return 0
}

func (m *GPUOptions) GetPollingInactiveDelayMsecs() int32 {
	if m != nil {
		return m.PollingInactiveDelayMsecs
	}
	return 0
}

func (m *GPUOptions) GetForceGpuCompatible() bool {
	if m != nil {
		return m.ForceGpuCompatible
	}
	return false
}

func (m *GPUOptions) GetExperimental() *GPUOptions_Experimental {
	if m != nil {
		return m.Experimental
	}
	return nil
}

// Everything inside Experimental is subject to change and is not subject
// to API stability guarantees in
// https://www.tensorflow.org/programmers_guide/version_compat.
type GPUOptions_Experimental struct {
	// The multi virtual device settings. If empty (not set), it will create
	// single virtual device on each visible GPU, according to the settings
	// in "visible_device_list" above. Otherwise, the number of elements in the
	// list must be the same as the number of visible GPUs (after
	// "visible_device_list" filtering if it is set), and the string represented
	// device names (e.g. /device:GPU:<id>) will refer to the virtual
	// devices and have the <id> field assigned sequentially starting from 0,
	// according to the order they appear in this list and the "memory_limit"
	// list inside each element. For example,
	//   visible_device_list = "1,0"
	//   virtual_devices { memory_limit: 1GB memory_limit: 2GB }
	//   virtual_devices {}
	// will create three virtual devices as:
	//   /device:GPU:0 -> visible GPU 1 with 1GB memory
	//   /device:GPU:1 -> visible GPU 1 with 2GB memory
	//   /device:GPU:2 -> visible GPU 0 with all available memory
	//
	// NOTE:
	// 1. It's invalid to set both this and "per_process_gpu_memory_fraction"
	//    at the same time.
	// 2. Currently this setting is per-process, not per-session. Using
	//    different settings in different sessions within same process will
	//    result in undefined behavior.
	VirtualDevices []*GPUOptions_Experimental_VirtualDevices `protobuf:"bytes,1,rep,name=virtual_devices,json=virtualDevices" json:"virtual_devices,omitempty"`
}

func (m *GPUOptions_Experimental) Reset()                    { *m = GPUOptions_Experimental{} }
func (m *GPUOptions_Experimental) String() string            { return proto.CompactTextString(m) }
func (*GPUOptions_Experimental) ProtoMessage()               {}
func (*GPUOptions_Experimental) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0, 0} }

func (m *GPUOptions_Experimental) GetVirtualDevices() []*GPUOptions_Experimental_VirtualDevices {
	if m != nil {
		return m.VirtualDevices
	}
	return nil
}

// Configuration for breaking down a visible GPU into multiple "virtual"
// devices.
type GPUOptions_Experimental_VirtualDevices struct {
	// Per "virtual" device memory limit, in MB. The number of elements in
	// the list is the number of virtual devices to create on the
	// corresponding visible GPU (see "virtual_devices" below).
	// If empty, it will create single virtual device taking all available
	// memory from the device.
	//
	// For the concept of "visible" and "virtual" GPU, see the comments for
	// "visible_device_list" above for more information.
	MemoryLimitMb []float32 `protobuf:"fixed32,1,rep,packed,name=memory_limit_mb,json=memoryLimitMb" json:"memory_limit_mb,omitempty"`
}

func (m *GPUOptions_Experimental_VirtualDevices) Reset() {
	*m = GPUOptions_Experimental_VirtualDevices{}
}
func (m *GPUOptions_Experimental_VirtualDevices) String() string { return proto.CompactTextString(m) }
func (*GPUOptions_Experimental_VirtualDevices) ProtoMessage()    {}
func (*GPUOptions_Experimental_VirtualDevices) Descriptor() ([]byte, []int) {
	return fileDescriptorConfig, []int{0, 0, 0}
}

func (m *GPUOptions_Experimental_VirtualDevices) GetMemoryLimitMb() []float32 {
	if m != nil {
		return m.MemoryLimitMb
	}
	return nil
}

// Options passed to the graph optimizer
type OptimizerOptions struct {
	// If true, optimize the graph using common subexpression elimination.
	DoCommonSubexpressionElimination bool `protobuf:"varint,1,opt,name=do_common_subexpression_elimination,json=doCommonSubexpressionElimination,proto3" json:"do_common_subexpression_elimination,omitempty"`
	// If true, perform constant folding optimization on the graph.
	DoConstantFolding bool `protobuf:"varint,2,opt,name=do_constant_folding,json=doConstantFolding,proto3" json:"do_constant_folding,omitempty"`
	// Constant folding optimization replaces tensors whose values can be
	// predetermined, with constant nodes. To avoid inserting too large constants,
	// the size of each constant created can be limited. If this value is zero, a
	// default limit of 10 MiB will be applied. If constant folding optimization
	// is disabled, this value is ignored.
	MaxFoldedConstantInBytes int64 `protobuf:"varint,6,opt,name=max_folded_constant_in_bytes,json=maxFoldedConstantInBytes,proto3" json:"max_folded_constant_in_bytes,omitempty"`
	// If true, perform function inlining on the graph.
	DoFunctionInlining bool `protobuf:"varint,4,opt,name=do_function_inlining,json=doFunctionInlining,proto3" json:"do_function_inlining,omitempty"`
	// Overall optimization level. The actual optimizations applied will be the
	// logical OR of the flags that this level implies and any flags already set.
	OptLevel       OptimizerOptions_Level          `protobuf:"varint,3,opt,name=opt_level,json=optLevel,proto3,enum=tensorflow.OptimizerOptions_Level" json:"opt_level,omitempty"`
	GlobalJitLevel OptimizerOptions_GlobalJitLevel `protobuf:"varint,5,opt,name=global_jit_level,json=globalJitLevel,proto3,enum=tensorflow.OptimizerOptions_GlobalJitLevel" json:"global_jit_level,omitempty"`
}

func (m *OptimizerOptions) Reset()                    { *m = OptimizerOptions{} }
func (m *OptimizerOptions) String() string            { return proto.CompactTextString(m) }
func (*OptimizerOptions) ProtoMessage()               {}
func (*OptimizerOptions) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *OptimizerOptions) GetDoCommonSubexpressionElimination() bool {
	if m != nil {
		return m.DoCommonSubexpressionElimination
	}
	return false
}

func (m *OptimizerOptions) GetDoConstantFolding() bool {
	if m != nil {
		return m.DoConstantFolding
	}
	return false
}

func (m *OptimizerOptions) GetMaxFoldedConstantInBytes() int64 {
	if m != nil {
		return m.MaxFoldedConstantInBytes
	}
	return 0
}

func (m *OptimizerOptions) GetDoFunctionInlining() bool {
	if m != nil {
		return m.DoFunctionInlining
	}
	return false
}

func (m *OptimizerOptions) GetOptLevel() OptimizerOptions_Level {
	if m != nil {
		return m.OptLevel
	}
	return OptimizerOptions_L1
}

func (m *OptimizerOptions) GetGlobalJitLevel() OptimizerOptions_GlobalJitLevel {
	if m != nil {
		return m.GlobalJitLevel
	}
	return OptimizerOptions_DEFAULT
}

type GraphOptions struct {
	// If true, use control flow to schedule the activation of Recv nodes.
	// (Currently ignored.)
	EnableRecvScheduling bool `protobuf:"varint,2,opt,name=enable_recv_scheduling,json=enableRecvScheduling,proto3" json:"enable_recv_scheduling,omitempty"`
	// Options controlling how graph is optimized.
	OptimizerOptions *OptimizerOptions `protobuf:"bytes,3,opt,name=optimizer_options,json=optimizerOptions" json:"optimizer_options,omitempty"`
	// The number of steps to run before returning a cost model detailing
	// the memory usage and performance of each node of the graph. 0 means
	// no cost model.
	BuildCostModel int64 `protobuf:"varint,4,opt,name=build_cost_model,json=buildCostModel,proto3" json:"build_cost_model,omitempty"`
	// The number of steps to skip before collecting statistics for the
	// cost model.
	BuildCostModelAfter int64 `protobuf:"varint,9,opt,name=build_cost_model_after,json=buildCostModelAfter,proto3" json:"build_cost_model_after,omitempty"`
	// Annotate each Node with Op output shape data, to the extent it can
	// be statically inferred.
	InferShapes bool `protobuf:"varint,5,opt,name=infer_shapes,json=inferShapes,proto3" json:"infer_shapes,omitempty"`
	// Only place the subgraphs that are run, rather than the entire graph.
	//
	// This is useful for interactive graph building, where one might
	// produce graphs that cannot be placed during the debugging
	// process.  In particular, it allows the client to continue work in
	// a session after adding a node to a graph whose placement
	// constraints are unsatisfiable.
	PlacePrunedGraph bool `protobuf:"varint,6,opt,name=place_pruned_graph,json=placePrunedGraph,proto3" json:"place_pruned_graph,omitempty"`
	// If true, transfer float values between processes as bfloat16.
	EnableBfloat16Sendrecv bool `protobuf:"varint,7,opt,name=enable_bfloat16_sendrecv,json=enableBfloat16Sendrecv,proto3" json:"enable_bfloat16_sendrecv,omitempty"`
	// If > 0, record a timeline every this many steps.
	// EXPERIMENTAL: This currently has no effect in MasterSession.
	TimelineStep int32 `protobuf:"varint,8,opt,name=timeline_step,json=timelineStep,proto3" json:"timeline_step,omitempty"`
	// Options that control the type and amount of graph rewriting.
	// Not currently configurable via the public Python API (i.e. there is no API
	// stability guarantee if you import RewriterConfig explicitly).
	RewriteOptions *RewriterConfig `protobuf:"bytes,10,opt,name=rewrite_options,json=rewriteOptions" json:"rewrite_options,omitempty"`
}

func (m *GraphOptions) Reset()                    { *m = GraphOptions{} }
func (m *GraphOptions) String() string            { return proto.CompactTextString(m) }
func (*GraphOptions) ProtoMessage()               {}
func (*GraphOptions) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{2} }

func (m *GraphOptions) GetEnableRecvScheduling() bool {
	if m != nil {
		return m.EnableRecvScheduling
	}
	return false
}

func (m *GraphOptions) GetOptimizerOptions() *OptimizerOptions {
	if m != nil {
		return m.OptimizerOptions
	}
	return nil
}

func (m *GraphOptions) GetBuildCostModel() int64 {
	if m != nil {
		return m.BuildCostModel
	}
	return 0
}

func (m *GraphOptions) GetBuildCostModelAfter() int64 {
	if m != nil {
		return m.BuildCostModelAfter
	}
	return 0
}

func (m *GraphOptions) GetInferShapes() bool {
	if m != nil {
		return m.InferShapes
	}
	return false
}

func (m *GraphOptions) GetPlacePrunedGraph() bool {
	if m != nil {
		return m.PlacePrunedGraph
	}
	return false
}

func (m *GraphOptions) GetEnableBfloat16Sendrecv() bool {
	if m != nil {
		return m.EnableBfloat16Sendrecv
	}
	return false
}

func (m *GraphOptions) GetTimelineStep() int32 {
	if m != nil {
		return m.TimelineStep
	}
	return 0
}

func (m *GraphOptions) GetRewriteOptions() *RewriterConfig {
	if m != nil {
		return m.RewriteOptions
	}
	return nil
}

type ThreadPoolOptionProto struct {
	// The number of threads in the pool.
	//
	// 0 means the system picks a value based on where this option proto is used
	// (see the declaration of the specific field for more info).
	NumThreads int32 `protobuf:"varint,1,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty"`
	// The global name of the threadpool.
	//
	// If empty, then the threadpool is made and used according to the scope it's
	// in - e.g., for a session threadpool, it is used by that session only.
	//
	// If non-empty, then:
	// - a global threadpool associated with this name is looked
	//   up or created. This allows, for example, sharing one threadpool across
	//   many sessions (e.g., like the default behavior, if
	//   inter_op_parallelism_threads is not configured), but still partitioning
	//   into a large and small pool.
	// - if the threadpool for this global_name already exists, then it is an
	//   error if the existing pool was created using a different num_threads
	//   value as is specified on this call.
	// - threadpools created this way are never garbage collected.
	GlobalName string `protobuf:"bytes,2,opt,name=global_name,json=globalName,proto3" json:"global_name,omitempty"`
}

func (m *ThreadPoolOptionProto) Reset()                    { *m = ThreadPoolOptionProto{} }
func (m *ThreadPoolOptionProto) String() string            { return proto.CompactTextString(m) }
func (*ThreadPoolOptionProto) ProtoMessage()               {}
func (*ThreadPoolOptionProto) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{3} }

func (m *ThreadPoolOptionProto) GetNumThreads() int32 {
	if m != nil {
		return m.NumThreads
	}
	return 0
}

func (m *ThreadPoolOptionProto) GetGlobalName() string {
	if m != nil {
		return m.GlobalName
	}
	return ""
}

type RPCOptions struct {
	// If true, always use RPC to contact the session target.
	//
	// If false (the default option), TensorFlow may use an optimized
	// transport for client-master communication that avoids the RPC
	// stack. This option is primarily for used testing the RPC stack.
	UseRpcForInprocessMaster bool `protobuf:"varint,1,opt,name=use_rpc_for_inprocess_master,json=useRpcForInprocessMaster,proto3" json:"use_rpc_for_inprocess_master,omitempty"`
}

func (m *RPCOptions) Reset()                    { *m = RPCOptions{} }
func (m *RPCOptions) String() string            { return proto.CompactTextString(m) }
func (*RPCOptions) ProtoMessage()               {}
func (*RPCOptions) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{4} }

func (m *RPCOptions) GetUseRpcForInprocessMaster() bool {
	if m != nil {
		return m.UseRpcForInprocessMaster
	}
	return false
}

// Session configuration parameters.
// The system picks appropriate values for fields that are not set.
type ConfigProto struct {
	// Map from device type name (e.g., "CPU" or "GPU" ) to maximum
	// number of devices of that type to use.  If a particular device
	// type is not found in the map, the system picks an appropriate
	// number.
	DeviceCount map[string]int32 `protobuf:"bytes,1,rep,name=device_count,json=deviceCount" json:"device_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The execution of an individual op (for some op types) can be
	// parallelized on a pool of intra_op_parallelism_threads.
	// 0 means the system picks an appropriate number.
	IntraOpParallelismThreads int32 `protobuf:"varint,2,opt,name=intra_op_parallelism_threads,json=intraOpParallelismThreads,proto3" json:"intra_op_parallelism_threads,omitempty"`
	// Nodes that perform blocking operations are enqueued on a pool of
	// inter_op_parallelism_threads available in each process.
	//
	// 0 means the system picks an appropriate number.
	//
	// Note that the first Session created in the process sets the
	// number of threads for all future sessions unless use_per_session_threads is
	// true or session_inter_op_thread_pool is configured.
	InterOpParallelismThreads int32 `protobuf:"varint,5,opt,name=inter_op_parallelism_threads,json=interOpParallelismThreads,proto3" json:"inter_op_parallelism_threads,omitempty"`
	// If true, use a new set of threads for this session rather than the global
	// pool of threads. Only supported by direct sessions.
	//
	// If false, use the global threads created by the first session, or the
	// per-session thread pools configured by session_inter_op_thread_pool.
	//
	// This option is deprecated. The same effect can be achieved by setting
	// session_inter_op_thread_pool to have one element, whose num_threads equals
	// inter_op_parallelism_threads.
	UsePerSessionThreads bool `protobuf:"varint,9,opt,name=use_per_session_threads,json=usePerSessionThreads,proto3" json:"use_per_session_threads,omitempty"`
	// This option is experimental - it may be replaced with a different mechanism
	// in the future.
	//
	// Configures session thread pools. If this is configured, then RunOptions for
	// a Run call can select the thread pool to use.
	//
	// The intended use is for when some session invocations need to run in a
	// background pool limited to a small number of threads:
	// - For example, a session may be configured to have one large pool (for
	// regular compute) and one small pool (for periodic, low priority work);
	// using the small pool is currently the mechanism for limiting the inter-op
	// parallelism of the low priority work.  Note that it does not limit the
	// parallelism of work spawned by a single op kernel implementation.
	// - Using this setting is normally not needed in training, but may help some
	// serving use cases.
	// - It is also generally recommended to set the global_name field of this
	// proto, to avoid creating multiple large pools. It is typically better to
	// run the non-low-priority work, even across sessions, in a single large
	// pool.
	SessionInterOpThreadPool []*ThreadPoolOptionProto `protobuf:"bytes,12,rep,name=session_inter_op_thread_pool,json=sessionInterOpThreadPool" json:"session_inter_op_thread_pool,omitempty"`
	// Assignment of Nodes to Devices is recomputed every placement_period
	// steps until the system warms up (at which point the recomputation
	// typically slows down automatically).
	PlacementPeriod int32 `protobuf:"varint,3,opt,name=placement_period,json=placementPeriod,proto3" json:"placement_period,omitempty"`
	// When any filters are present sessions will ignore all devices which do not
	// match the filters. Each filter can be partially specified, e.g. "/job:ps"
	// "/job:worker/replica:3", etc.
	DeviceFilters []string `protobuf:"bytes,4,rep,name=device_filters,json=deviceFilters" json:"device_filters,omitempty"`
	// Options that apply to all GPUs.
	GpuOptions *GPUOptions `protobuf:"bytes,6,opt,name=gpu_options,json=gpuOptions" json:"gpu_options,omitempty"`
	// Whether soft placement is allowed. If allow_soft_placement is true,
	// an op will be placed on CPU if
	//   1. there's no GPU implementation for the OP
	// or
	//   2. no GPU devices are known or registered
	// or
	//   3. need to co-locate with reftype input(s) which are from CPU.
	AllowSoftPlacement bool `protobuf:"varint,7,opt,name=allow_soft_placement,json=allowSoftPlacement,proto3" json:"allow_soft_placement,omitempty"`
	// Whether device placements should be logged.
	LogDevicePlacement bool `protobuf:"varint,8,opt,name=log_device_placement,json=logDevicePlacement,proto3" json:"log_device_placement,omitempty"`
	// Options that apply to all graphs.
	GraphOptions *GraphOptions `protobuf:"bytes,10,opt,name=graph_options,json=graphOptions" json:"graph_options,omitempty"`
	// Global timeout for all blocking operations in this session.  If non-zero,
	// and not overridden on a per-operation basis, this value will be used as the
	// deadline for all blocking operations.
	OperationTimeoutInMs int64 `protobuf:"varint,11,opt,name=operation_timeout_in_ms,json=operationTimeoutInMs,proto3" json:"operation_timeout_in_ms,omitempty"`
	// Options that apply when this session uses the distributed runtime.
	RpcOptions *RPCOptions `protobuf:"bytes,13,opt,name=rpc_options,json=rpcOptions" json:"rpc_options,omitempty"`
	// Optional list of all workers to use in this session.
	ClusterDef *ClusterDef `protobuf:"bytes,14,opt,name=cluster_def,json=clusterDef" json:"cluster_def,omitempty"`
	// If true, any resources such as Variables used in the session will not be
	// shared with other sessions.
	IsolateSessionState bool `protobuf:"varint,15,opt,name=isolate_session_state,json=isolateSessionState,proto3" json:"isolate_session_state,omitempty"`
}

func (m *ConfigProto) Reset()                    { *m = ConfigProto{} }
func (m *ConfigProto) String() string            { return proto.CompactTextString(m) }
func (*ConfigProto) ProtoMessage()               {}
func (*ConfigProto) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{5} }

func (m *ConfigProto) GetDeviceCount() map[string]int32 {
	if m != nil {
		return m.DeviceCount
	}
	return nil
}

func (m *ConfigProto) GetIntraOpParallelismThreads() int32 {
	if m != nil {
		return m.IntraOpParallelismThreads
	}
	return 0
}

func (m *ConfigProto) GetInterOpParallelismThreads() int32 {
	if m != nil {
		return m.InterOpParallelismThreads
	}
	return 0
}

func (m *ConfigProto) GetUsePerSessionThreads() bool {
	if m != nil {
		return m.UsePerSessionThreads
	}
	return false
}

func (m *ConfigProto) GetSessionInterOpThreadPool() []*ThreadPoolOptionProto {
	if m != nil {
		return m.SessionInterOpThreadPool
	}
	return nil
}

func (m *ConfigProto) GetPlacementPeriod() int32 {
	if m != nil {
		return m.PlacementPeriod
	}
	return 0
}

func (m *ConfigProto) GetDeviceFilters() []string {
	if m != nil {
		return m.DeviceFilters
	}
	return nil
}

func (m *ConfigProto) GetGpuOptions() *GPUOptions {
	if m != nil {
		return m.GpuOptions
	}
	return nil
}

func (m *ConfigProto) GetAllowSoftPlacement() bool {
	if m != nil {
		return m.AllowSoftPlacement
	}
	return false
}

func (m *ConfigProto) GetLogDevicePlacement() bool {
	if m != nil {
		return m.LogDevicePlacement
	}
	return false
}

func (m *ConfigProto) GetGraphOptions() *GraphOptions {
	if m != nil {
		return m.GraphOptions
	}
	return nil
}

func (m *ConfigProto) GetOperationTimeoutInMs() int64 {
	if m != nil {
		return m.OperationTimeoutInMs
	}
	return 0
}

func (m *ConfigProto) GetRpcOptions() *RPCOptions {
	if m != nil {
		return m.RpcOptions
	}
	return nil
}

func (m *ConfigProto) GetClusterDef() *ClusterDef {
	if m != nil {
		return m.ClusterDef
	}
	return nil
}

func (m *ConfigProto) GetIsolateSessionState() bool {
	if m != nil {
		return m.IsolateSessionState
	}
	return false
}

// Options for a single Run() call.
type RunOptions struct {
	TraceLevel RunOptions_TraceLevel `protobuf:"varint,1,opt,name=trace_level,json=traceLevel,proto3,enum=tensorflow.RunOptions_TraceLevel" json:"trace_level,omitempty"`
	// Time to wait for operation to complete in milliseconds.
	TimeoutInMs int64 `protobuf:"varint,2,opt,name=timeout_in_ms,json=timeoutInMs,proto3" json:"timeout_in_ms,omitempty"`
	// The thread pool to use, if session_inter_op_thread_pool is configured.
	InterOpThreadPool int32 `protobuf:"varint,3,opt,name=inter_op_thread_pool,json=interOpThreadPool,proto3" json:"inter_op_thread_pool,omitempty"`
	// Whether the partition graph(s) executed by the executor(s) should be
	// outputted via RunMetadata.
	OutputPartitionGraphs bool `protobuf:"varint,5,opt,name=output_partition_graphs,json=outputPartitionGraphs,proto3" json:"output_partition_graphs,omitempty"`
	// EXPERIMENTAL.  Options used to initialize DebuggerState, if enabled.
	DebugOptions *DebugOptions `protobuf:"bytes,6,opt,name=debug_options,json=debugOptions" json:"debug_options,omitempty"`
	// When enabled, causes tensor alllocation information to be included in
	// the error message when the Run() call fails because the allocator ran
	// out of memory (OOM).
	//
	// Enabling this option can slow down the Run() call.
	ReportTensorAllocationsUponOom bool `protobuf:"varint,7,opt,name=report_tensor_allocations_upon_oom,json=reportTensorAllocationsUponOom,proto3" json:"report_tensor_allocations_upon_oom,omitempty"`
}

func (m *RunOptions) Reset()                    { *m = RunOptions{} }
func (m *RunOptions) String() string            { return proto.CompactTextString(m) }
func (*RunOptions) ProtoMessage()               {}
func (*RunOptions) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{6} }

func (m *RunOptions) GetTraceLevel() RunOptions_TraceLevel {
	if m != nil {
		return m.TraceLevel
	}
	return RunOptions_NO_TRACE
}

func (m *RunOptions) GetTimeoutInMs() int64 {
	if m != nil {
		return m.TimeoutInMs
	}
	return 0
}

func (m *RunOptions) GetInterOpThreadPool() int32 {
	if m != nil {
		return m.InterOpThreadPool
	}
	return 0
}

func (m *RunOptions) GetOutputPartitionGraphs() bool {
	if m != nil {
		return m.OutputPartitionGraphs
	}
	return false
}

func (m *RunOptions) GetDebugOptions() *DebugOptions {
	if m != nil {
		return m.DebugOptions
	}
	return nil
}

func (m *RunOptions) GetReportTensorAllocationsUponOom() bool {
	if m != nil {
		return m.ReportTensorAllocationsUponOom
	}
	return false
}

// Metadata output (i.e., non-Tensor) for a single Run() call.
type RunMetadata struct {
	// Statistics traced for this step. Populated if tracing is turned on via the
	// "RunOptions" proto.
	// EXPERIMENTAL: The format and set of events may change in future versions.
	StepStats *tensorflow13.StepStats `protobuf:"bytes,1,opt,name=step_stats,json=stepStats" json:"step_stats,omitempty"`
	// The cost graph for the computation defined by the run call.
	CostGraph *tensorflow2.CostGraphDef `protobuf:"bytes,2,opt,name=cost_graph,json=costGraph" json:"cost_graph,omitempty"`
	// Graphs of the partitions executed by executors.
	PartitionGraphs []*tensorflow10.GraphDef `protobuf:"bytes,3,rep,name=partition_graphs,json=partitionGraphs" json:"partition_graphs,omitempty"`
}

func (m *RunMetadata) Reset()                    { *m = RunMetadata{} }
func (m *RunMetadata) String() string            { return proto.CompactTextString(m) }
func (*RunMetadata) ProtoMessage()               {}
func (*RunMetadata) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{7} }

func (m *RunMetadata) GetStepStats() *tensorflow13.StepStats {
	if m != nil {
		return m.StepStats
	}
	return nil
}

func (m *RunMetadata) GetCostGraph() *tensorflow2.CostGraphDef {
	if m != nil {
		return m.CostGraph
	}
	return nil
}

func (m *RunMetadata) GetPartitionGraphs() []*tensorflow10.GraphDef {
	if m != nil {
		return m.PartitionGraphs
	}
	return nil
}

func init() {
	proto.RegisterType((*GPUOptions)(nil), "tensorflow.GPUOptions")
	proto.RegisterType((*GPUOptions_Experimental)(nil), "tensorflow.GPUOptions.Experimental")
	proto.RegisterType((*GPUOptions_Experimental_VirtualDevices)(nil), "tensorflow.GPUOptions.Experimental.VirtualDevices")
	proto.RegisterType((*OptimizerOptions)(nil), "tensorflow.OptimizerOptions")
	proto.RegisterType((*GraphOptions)(nil), "tensorflow.GraphOptions")
	proto.RegisterType((*ThreadPoolOptionProto)(nil), "tensorflow.ThreadPoolOptionProto")
	proto.RegisterType((*RPCOptions)(nil), "tensorflow.RPCOptions")
	proto.RegisterType((*ConfigProto)(nil), "tensorflow.ConfigProto")
	proto.RegisterType((*RunOptions)(nil), "tensorflow.RunOptions")
	proto.RegisterType((*RunMetadata)(nil), "tensorflow.RunMetadata")
	proto.RegisterEnum("tensorflow.OptimizerOptions_Level", OptimizerOptions_Level_name, OptimizerOptions_Level_value)
	proto.RegisterEnum("tensorflow.OptimizerOptions_GlobalJitLevel", OptimizerOptions_GlobalJitLevel_name, OptimizerOptions_GlobalJitLevel_value)
	proto.RegisterEnum("tensorflow.RunOptions_TraceLevel", RunOptions_TraceLevel_name, RunOptions_TraceLevel_value)
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 1772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xdd, 0x52, 0x1b, 0xcb,
	0x11, 0xf6, 0x4a, 0x08, 0x8b, 0x96, 0x10, 0xf2, 0x18, 0xcc, 0x86, 0x50, 0x39, 0x3a, 0x72, 0x7c,
	0x8a, 0xfc, 0x94, 0xb0, 0x39, 0xe7, 0xd8, 0xae, 0xfc, 0xd8, 0x05, 0x02, 0x11, 0x1c, 0x30, 0xaa,
	0x01, 0x92, 0x4a, 0x72, 0x31, 0xb5, 0xda, 0x1d, 0x89, 0x8d, 0x77, 0x77, 0xa6, 0x66, 0x66, 0xc1,
	0xe4, 0x32, 0x4f, 0x90, 0x97, 0xf0, 0x63, 0xe4, 0x22, 0x79, 0xaa, 0xdc, 0x25, 0x35, 0x3f, 0x2b,
	0xad, 0x00, 0x3b, 0x47, 0x57, 0x3b, 0xfd, 0x7d, 0xdd, 0x3b, 0xdb, 0xfd, 0xf5, 0xf4, 0x08, 0x9e,
	0x29, 0x9a, 0x49, 0x26, 0xc6, 0x09, 0xbb, 0xde, 0x0e, 0x99, 0xa0, 0xdb, 0x5c, 0x30, 0xc5, 0x46,
	0xf9, 0x78, 0x3b, 0x64, 0xd9, 0x38, 0x9e, 0xf4, 0xcc, 0x1a, 0xc1, 0x8c, 0xb6, 0xf1, 0xf3, 0xdb,
	0x2e, 0x63, 0x11, 0xa4, 0xf4, 0x9a, 0x89, 0x0f, 0xdb, 0x21, 0x93, 0x8a, 0x4c, 0x44, 0xc0, 0x2f,
	0xad, 0xdf, 0xc6, 0xb3, 0xcf, 0x73, 0xcb, 0xb4, 0x2f, 0x84, 0x94, 0x8a, 0x72, 0x22, 0x55, 0xa0,
	0xa4, 0xe3, 0xfe, 0xf4, 0xb3, 0x3b, 0x8e, 0xe8, 0x28, 0x77, 0x1b, 0xde, 0xf8, 0xe6, 0xf3, 0xdf,
	0x95, 0xe4, 0x52, 0x51, 0xe1, 0x78, 0xbd, 0xcf, 0xf2, 0x04, 0xbd, 0x16, 0xb1, 0xa2, 0x82, 0x94,
	0x13, 0xd1, 0xfd, 0x54, 0x03, 0x38, 0x1c, 0x5e, 0x9c, 0x72, 0x15, 0xb3, 0x4c, 0xa2, 0x7d, 0xf8,
	0x8a, 0x53, 0x41, 0xb8, 0x60, 0x21, 0x95, 0x92, 0x4c, 0x78, 0x4e, 0x52, 0x9a, 0x32, 0x71, 0x43,
	0xc6, 0x22, 0x08, 0x35, 0xc7, 0xf7, 0x3a, 0xde, 0x96, 0x87, 0x7f, 0xcc, 0xa9, 0x18, 0x5a, 0xd6,
	0x21, 0xcf, 0x4f, 0x0c, 0x67, 0xe0, 0x28, 0xe8, 0x19, 0xb4, 0x82, 0x24, 0x61, 0x61, 0xa0, 0x98,
	0x20, 0xea, 0x86, 0x53, 0xbf, 0xd2, 0xf1, 0xb6, 0x96, 0xf0, 0xf2, 0xd4, 0x7a, 0x7e, 0xc3, 0x29,
	0x7a, 0x09, 0xeb, 0x11, 0x1d, 0x53, 0x21, 0x68, 0x44, 0x22, 0x9a, 0x50, 0xed, 0x4b, 0x46, 0x37,
	0x8a, 0x4a, 0xbf, 0xda, 0xf1, 0xb6, 0xaa, 0x78, 0xad, 0x80, 0xf7, 0x1d, 0xba, 0xa7, 0x41, 0xf4,
	0x35, 0x34, 0x75, 0xa0, 0x6b, 0x32, 0x11, 0xec, 0x5a, 0x5d, 0xfa, 0x0b, 0x1d, 0x6f, 0xab, 0x8e,
	0x1b, 0xc6, 0x76, 0x68, 0x4c, 0xa8, 0x07, 0x8f, 0xaf, 0x62, 0x19, 0x8f, 0x12, 0x4a, 0x22, 0x7a,
	0x15, 0x87, 0x94, 0x24, 0xb1, 0x54, 0x7e, 0xcd, 0x6c, 0xe3, 0x91, 0x83, 0xf6, 0x0d, 0x72, 0x1c,
	0x4b, 0x85, 0x7e, 0x0d, 0x1b, 0x9c, 0x25, 0x49, 0x9c, 0x4d, 0x88, 0xfe, 0x86, 0x2b, 0xed, 0x96,
	0x04, 0x37, 0x24, 0x97, 0x34, 0x94, 0xfe, 0x62, 0xc7, 0xdb, 0xaa, 0xe1, 0x75, 0xc7, 0xd8, 0x35,
	0x84, 0x7d, 0x8d, 0x5f, 0x68, 0x18, 0xbd, 0x85, 0xcd, 0xc2, 0x39, 0xce, 0xe6, 0xdc, 0x53, 0xe3,
	0xfe, 0xd0, 0xb8, 0xff, 0xc8, 0x71, 0x8e, 0x1c, 0xc5, 0x04, 0x38, 0x31, 0x01, 0x9e, 0xc3, 0xea,
	0x98, 0x89, 0x90, 0x9a, 0x7c, 0x87, 0x2c, 0xe5, 0x81, 0xd2, 0xfb, 0xf3, 0xeb, 0xe6, 0xc3, 0x90,
	0xc1, 0x0e, 0x79, 0xde, 0x9f, 0x22, 0xe8, 0x10, 0x9a, 0xf4, 0x23, 0xa7, 0x22, 0x4e, 0x69, 0xa6,
	0x82, 0xc4, 0x5f, 0xea, 0x78, 0x5b, 0x8d, 0x9d, 0xa7, 0xa5, 0xea, 0xf7, 0x66, 0x55, 0xed, 0x1d,
	0x94, 0xa8, 0x78, 0xce, 0x71, 0xe3, 0x93, 0x07, 0xcd, 0x32, 0x8c, 0xfe, 0x02, 0x2b, 0x57, 0xb1,
	0x50, 0x79, 0x90, 0xb8, 0xcc, 0x49, 0xdf, 0xeb, 0x54, 0xb7, 0x1a, 0x3b, 0x3b, 0x3f, 0x20, 0x78,
	0xef, 0x0f, 0xd6, 0xd5, 0x66, 0x56, 0xe2, 0xd6, 0xd5, 0xdc, 0x7a, 0xe3, 0x35, 0xb4, 0xe6, 0x19,
	0xe8, 0x1b, 0x58, 0x71, 0x02, 0x4b, 0xe2, 0x34, 0x56, 0x24, 0x1d, 0x99, 0xd7, 0x55, 0xf0, 0xb2,
	0x35, 0x1f, 0x6b, 0xeb, 0xc9, 0xa8, 0xfb, 0xf7, 0x05, 0x68, 0xeb, 0x37, 0xa6, 0xf1, 0xdf, 0xa8,
	0x28, 0xd4, 0x7a, 0x02, 0x4f, 0x23, 0xa6, 0x13, 0x96, 0xb2, 0x8c, 0xc8, 0x7c, 0x44, 0x3f, 0x72,
	0x41, 0xa5, 0xd4, 0x32, 0xa2, 0x3a, 0x5c, 0x16, 0x4c, 0x15, 0x5b, 0xc7, 0x9d, 0x88, 0xf5, 0x0d,
	0xf3, 0xac, 0x4c, 0x3c, 0x98, 0xf1, 0xb4, 0x68, 0x4c, 0xb8, 0x4c, 0xaa, 0x20, 0x53, 0x64, 0xcc,
	0x92, 0x28, 0xce, 0x26, 0x46, 0xbb, 0x75, 0xfc, 0x48, 0xbb, 0x5b, 0x64, 0x60, 0x01, 0xf4, 0x06,
	0x36, 0xd3, 0xe0, 0xa3, 0xe1, 0xd1, 0x68, 0xe6, 0x17, 0x17, 0x22, 0x5e, 0x34, 0x22, 0xf6, 0xd3,
	0xe0, 0xe3, 0xc0, 0x50, 0x0a, 0xff, 0x23, 0xa7, 0xe3, 0xe7, 0xb0, 0x1a, 0x31, 0x32, 0xce, 0x33,
	0xd3, 0x35, 0x24, 0xce, 0x92, 0x38, 0xd3, 0x2f, 0xb4, 0x7a, 0x46, 0x11, 0x1b, 0x38, 0xe8, 0xc8,
	0x21, 0xe8, 0x2d, 0x2c, 0x31, 0xae, 0x48, 0x42, 0xaf, 0x68, 0x62, 0x7a, 0xa4, 0xb5, 0xd3, 0x2d,
	0x97, 0xe5, 0x76, 0x86, 0x7a, 0xc7, 0x9a, 0x89, 0xeb, 0x8c, 0x2b, 0xf3, 0x84, 0x2e, 0xa0, 0x3d,
	0x49, 0xd8, 0x28, 0x48, 0xc8, 0x5f, 0xe3, 0x22, 0x4e, 0xcd, 0xc4, 0xf9, 0xc5, 0x17, 0xe3, 0x1c,
	0x1a, 0xa7, 0x77, 0xb1, 0x0d, 0x83, 0x5b, 0x93, 0xb9, 0x75, 0xb7, 0x03, 0x35, 0x1b, 0x7f, 0x11,
	0x2a, 0xc7, 0x2f, 0xda, 0x0f, 0xd0, 0x0a, 0x54, 0x8e, 0x9f, 0xb7, 0xff, 0x5b, 0xfc, 0xbc, 0x6e,
	0x1f, 0x5a, 0xf3, 0x31, 0x50, 0x03, 0x1e, 0xee, 0x1f, 0x0c, 0x76, 0x2f, 0x8e, 0xcf, 0xdb, 0x0f,
	0x50, 0x1b, 0xaa, 0xa7, 0x83, 0x41, 0xc9, 0x01, 0xd5, 0x61, 0xe1, 0xf4, 0x3d, 0x79, 0xd1, 0x2e,
	0x9e, 0x76, 0xda, 0x95, 0xee, 0x3f, 0x16, 0xa0, 0x79, 0xa8, 0x8f, 0xd9, 0x42, 0x00, 0xdf, 0xc1,
	0x13, 0x9a, 0x05, 0xba, 0xcb, 0x05, 0x0d, 0xaf, 0x88, 0x0c, 0x2f, 0x69, 0x94, 0x27, 0xb3, 0xa2,
	0xad, 0x5a, 0x14, 0xd3, 0xf0, 0xea, 0x6c, 0x8a, 0xa1, 0x23, 0x78, 0xc4, 0x8a, 0x0f, 0x24, 0xcc,
	0x86, 0x32, 0xd9, 0x6c, 0xec, 0x6c, 0x7e, 0x29, 0x0b, 0xb8, 0xcd, 0x6e, 0x2b, 0x70, 0x0b, 0xda,
	0xa3, 0x3c, 0x4e, 0x74, 0xf5, 0xa5, 0x22, 0x29, 0x8b, 0x68, 0x62, 0xca, 0x57, 0xc5, 0x2d, 0x63,
	0xef, 0x33, 0xa9, 0x4e, 0xb4, 0x15, 0x7d, 0x0b, 0x4f, 0x6e, 0x33, 0x49, 0x30, 0x56, 0x54, 0x98,
	0xde, 0xad, 0xe2, 0xc7, 0xf3, 0xfc, 0x5d, 0x0d, 0xe9, 0x93, 0x2e, 0xce, 0xc6, 0x54, 0x10, 0x79,
	0x19, 0x70, 0x2a, 0x4d, 0xa9, 0xea, 0xb8, 0x61, 0x6c, 0x67, 0xc6, 0x84, 0x7e, 0x09, 0x88, 0x27,
	0x41, 0x48, 0x09, 0x17, 0x79, 0x46, 0x23, 0x3b, 0xad, 0x8c, 0xf4, 0xea, 0xb8, 0x6d, 0x90, 0xa1,
	0x01, 0x4c, 0xde, 0xd0, 0x6b, 0xf0, 0x5d, 0xc2, 0x46, 0xe3, 0x84, 0x05, 0xea, 0xc5, 0x4b, 0x22,
	0x69, 0x16, 0xe9, 0xec, 0x99, 0x63, 0xaa, 0x8e, 0x5d, 0x42, 0xf7, 0x1c, 0x7c, 0xe6, 0x50, 0xf4,
	0x14, 0x96, 0x55, 0x9c, 0xd2, 0x24, 0xce, 0x28, 0xd1, 0x33, 0xcc, 0x1c, 0x4e, 0x35, 0xdc, 0x2c,
	0x8c, 0x67, 0x8a, 0x72, 0xd4, 0x87, 0x15, 0x37, 0x66, 0xa6, 0x79, 0x05, 0x93, 0xd7, 0xf2, 0x5c,
	0xea, 0x61, 0x37, 0x89, 0xfa, 0x66, 0x10, 0xe1, 0x96, 0x73, 0x71, 0x39, 0x7d, 0xb7, 0x50, 0xf7,
	0xda, 0x15, 0xfc, 0x4c, 0x7e, 0x88, 0xf9, 0xff, 0xed, 0xed, 0xee, 0x9f, 0x60, 0xed, 0xfc, 0x52,
	0xd0, 0x20, 0x1a, 0x32, 0x96, 0xd8, 0x08, 0x43, 0x33, 0xe1, 0xbf, 0x82, 0x46, 0x96, 0xa7, 0x44,
	0x19, 0x50, 0x9a, 0x33, 0xa0, 0x86, 0x21, 0xcb, 0x53, 0x4b, 0x97, 0x9a, 0xe0, 0x5a, 0x21, 0x0b,
	0xd2, 0x62, 0x42, 0x81, 0x35, 0xbd, 0x0f, 0x52, 0xda, 0x3d, 0x06, 0xc0, 0xc3, 0x7e, 0x51, 0xe9,
	0x37, 0xb0, 0x99, 0x4b, 0x4a, 0x04, 0x0f, 0xc9, 0x98, 0x09, 0x12, 0x67, 0xc5, 0x8c, 0x4c, 0x03,
	0x3d, 0x7e, 0xdd, 0x21, 0xe3, 0xe7, 0x92, 0x62, 0x1e, 0x0e, 0x98, 0x38, 0x2a, 0x08, 0x27, 0x06,
	0xef, 0xfe, 0xeb, 0x21, 0x34, 0xec, 0x07, 0xdb, 0xfd, 0xfd, 0x1e, 0x9a, 0x6e, 0x32, 0x85, 0x2c,
	0xcf, 0x94, 0x3b, 0x64, 0xb7, 0xca, 0x79, 0x2a, 0xd1, 0x7b, 0xf6, 0xbc, 0xec, 0x6b, 0xea, 0x41,
	0xa6, 0xc4, 0x0d, 0x6e, 0x44, 0x33, 0x8b, 0x9e, 0x40, 0x71, 0xa6, 0x44, 0x40, 0x18, 0x27, 0x3c,
	0x10, 0x41, 0x92, 0xd0, 0x24, 0x96, 0xb3, 0xaf, 0xaf, 0xd8, 0x09, 0x64, 0x38, 0xa7, 0x7c, 0x38,
	0x63, 0x14, 0xc9, 0xb0, 0x01, 0x4c, 0x3b, 0xdc, 0x1b, 0xa0, 0x36, 0x0d, 0xa0, 0xb5, 0x7f, 0x4f,
	0x80, 0xef, 0x61, 0x5d, 0xa7, 0x47, 0x5f, 0x1e, 0xa4, 0x2b, 0x53, 0xe1, 0xbb, 0x64, 0x5b, 0x31,
	0x97, 0x74, 0x48, 0xc5, 0x99, 0x05, 0x0b, 0xb7, 0x00, 0x36, 0x0b, 0xfa, 0xf4, 0xfd, 0xd6, 0x8f,
	0x70, 0xc6, 0x12, 0xbf, 0x69, 0xb2, 0xf2, 0x75, 0x39, 0x2b, 0xf7, 0x96, 0x1b, 0xfb, 0x2e, 0xcc,
	0x91, 0xdd, 0xe1, 0x8c, 0x84, 0x7e, 0x06, 0xb6, 0x0d, 0xf4, 0x84, 0xd2, 0xfb, 0x8b, 0x59, 0x64,
	0x9a, 0xbd, 0x86, 0x57, 0xa6, 0xf6, 0xa1, 0x31, 0xeb, 0x7b, 0x8b, 0xab, 0xc9, 0x38, 0x4e, 0x14,
	0x15, 0xd2, 0x5f, 0xe8, 0x54, 0xf5, 0xbd, 0xc5, 0x5a, 0x07, 0xd6, 0x88, 0x5e, 0x41, 0x43, 0x0f,
	0xea, 0x42, 0xe1, 0x8b, 0x46, 0xe1, 0x4f, 0xee, 0x1f, 0x8f, 0x18, 0x26, 0x3c, 0x2f, 0x34, 0xf4,
	0x1c, 0x56, 0xed, 0xc5, 0x45, 0xb2, 0xb1, 0x22, 0xd3, 0xb7, 0xbb, 0xce, 0x43, 0x06, 0x3b, 0x63,
	0x63, 0x35, 0x2c, 0x10, 0xed, 0x91, 0xb0, 0x49, 0x71, 0x87, 0x99, 0x79, 0xb8, 0x9b, 0x41, 0xc2,
	0x26, 0x56, 0x18, 0x33, 0x8f, 0xdf, 0xc2, 0xb2, 0x39, 0x02, 0x6e, 0x35, 0xa0, 0x3f, 0xb7, 0xbd,
	0xd2, 0x19, 0x8a, 0x9b, 0x93, 0xf2, 0x89, 0xfa, 0x3d, 0xac, 0x33, 0x4e, 0x85, 0x69, 0x2e, 0xa2,
	0x7b, 0x9b, 0xe5, 0x66, 0xa2, 0xa5, 0xd2, 0x6f, 0x98, 0x73, 0x6a, 0x75, 0x0a, 0x9f, 0x5b, 0xf4,
	0x28, 0x3b, 0x31, 0x29, 0xd1, 0x9d, 0x51, 0xbc, 0x73, 0xf9, 0x6e, 0x4a, 0x66, 0xad, 0x84, 0x41,
	0xf0, 0xb0, 0x78, 0xdf, 0x2b, 0x68, 0xb8, 0x0b, 0x2c, 0x89, 0xe8, 0xd8, 0x6f, 0xdd, 0x75, 0xec,
	0x5b, 0x78, 0x9f, 0x8e, 0x31, 0x84, 0xd3, 0x67, 0xb4, 0x03, 0x6b, 0xb1, 0x64, 0x49, 0xa0, 0xe8,
	0x54, 0x70, 0xfa, 0x56, 0x4d, 0xfd, 0x15, 0x93, 0x9a, 0xc7, 0x0e, 0x74, 0x7a, 0x3b, 0xd3, 0xd0,
	0xc6, 0x1b, 0x68, 0xdf, 0xee, 0x23, 0x3d, 0x79, 0x3e, 0xd0, 0x1b, 0xd3, 0xbe, 0x4b, 0x58, 0x3f,
	0xa2, 0x55, 0xa8, 0x5d, 0x05, 0x49, 0x4e, 0x5d, 0xd7, 0xd8, 0xc5, 0xaf, 0x2a, 0xaf, 0xbd, 0xee,
	0xbf, 0xab, 0x00, 0x38, 0xcf, 0x8a, 0xbd, 0xef, 0x41, 0x43, 0x09, 0x7d, 0xf4, 0xda, 0x39, 0xea,
	0x99, 0x39, 0x3a, 0xa7, 0xd5, 0x19, 0xb9, 0x77, 0xae, 0x99, 0x76, 0x7a, 0x82, 0x9a, 0x3e, 0xa3,
	0xae, 0x3d, 0x56, 0x67, 0x59, 0xae, 0x98, 0x2c, 0x37, 0x54, 0x29, 0xb9, 0xdb, 0xb0, 0x7a, 0x6f,
	0x73, 0x58, 0x15, 0x3f, 0x8a, 0xef, 0x48, 0xfe, 0x25, 0xac, 0xb3, 0x5c, 0xf1, 0x5c, 0xe9, 0x5e,
	0x56, 0xb1, 0xa9, 0xa5, 0xa9, 0x72, 0x31, 0x41, 0xd6, 0x2c, 0x3c, 0x2c, 0x50, 0x23, 0x08, 0xa9,
	0xb5, 0x63, 0xfe, 0x73, 0xdc, 0x92, 0xf6, 0x9c, 0x76, 0xf6, 0x35, 0x61, 0xaa, 0x9d, 0xa8, 0xb4,
	0x42, 0xef, 0xa0, 0x2b, 0x28, 0x67, 0x42, 0x11, 0xcb, 0x27, 0xee, 0xba, 0xaf, 0x41, 0x92, 0x73,
	0x96, 0x11, 0xc6, 0x52, 0x27, 0xf6, 0x9f, 0x58, 0xe6, 0xb9, 0x21, 0xee, 0xce, 0x78, 0x17, 0x9c,
	0x65, 0xa7, 0x2c, 0xed, 0x62, 0x80, 0x59, 0xc6, 0x50, 0x13, 0xea, 0xef, 0x4f, 0xc9, 0x39, 0xde,
	0xed, 0x1f, 0xb4, 0x1f, 0x20, 0x04, 0xad, 0xb3, 0xd3, 0xc1, 0xf9, 0x1f, 0x77, 0xf1, 0x81, 0xb3,
	0x79, 0xda, 0xf6, 0xbb, 0x5d, 0xbc, 0x5f, 0xb2, 0x55, 0x50, 0x0b, 0x60, 0x70, 0x71, 0x7c, 0xec,
	0xd6, 0xd5, 0x77, 0x0b, 0xf5, 0x85, 0x76, 0xad, 0xfb, 0x4f, 0x0f, 0x1a, 0x38, 0xcf, 0x4e, 0xa8,
	0x0a, 0xa2, 0x40, 0x05, 0xe8, 0x3b, 0x80, 0xd9, 0x7f, 0x32, 0x53, 0xc4, 0xc6, 0xce, 0x5a, 0xf9,
	0x8b, 0xf5, 0x64, 0xd3, 0xfa, 0x91, 0x78, 0x49, 0x16, 0x8f, 0xe8, 0x15, 0xc0, 0xec, 0xcf, 0xa1,
	0x29, 0xda, 0xad, 0x3c, 0xe9, 0x49, 0x6e, 0xd2, 0xaa, 0x85, 0xbb, 0x14, 0x16, 0x2b, 0xf4, 0x16,
	0xda, 0x77, 0x8a, 0x52, 0x35, 0xa7, 0xdc, 0xea, 0x9d, 0x16, 0xd5, 0xae, 0x2b, 0x7c, 0xbe, 0x48,
	0x7b, 0x1f, 0xc0, 0x67, 0x62, 0x52, 0xe6, 0x4e, 0xff, 0x5c, 0xee, 0x35, 0x4b, 0x23, 0x43, 0x0e,
	0xbd, 0x3f, 0xff, 0x66, 0x12, 0xab, 0xcb, 0x7c, 0xd4, 0x0b, 0x59, 0xba, 0x5d, 0xfa, 0x63, 0x78,
	0xff, 0xe3, 0x84, 0xcd, 0xff, 0x63, 0xfc, 0x8f, 0xe7, 0x8d, 0x16, 0xcd, 0xe2, 0xdb, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x85, 0x34, 0xe4, 0x69, 0x57, 0x0f, 0x00, 0x00,
}
